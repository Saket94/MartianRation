@model MartianRation.Models.PacketRationModel


@{
    Layout = null;
    ViewBag.Title = "Save";
}
<link href="~/Scripts/DatePicker/bootstrap-datepicker.css" rel="stylesheet" />
<script src="~/Scripts/DatePicker/bootstrap-datepicker.js"></script>

@using (Html.BeginForm("Save", "Ration", FormMethod.Post, new { id = "popupForm" }))
{
    if (Model != null && Model.PacketId > 0)
    {
        @Html.HiddenFor(a => a.PacketId)
        @Html.HiddenFor(a => a.PacketTypeId)
    }

    <div class="form-group">
        @Html.LabelFor(model => model.PacketTypeId, htmlAttributes: new { @class = "control-label" })
        @Html.DropDownListFor(model => model.PacketTypeId, Model.PacketTypeList, "Select PacketType", new { @id = "ddlPacketTypeId", @class = "form-control" })
        @Html.ValidationMessageFor(model => model.PacketTypeId, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PacketContent, htmlAttributes: new { @class = "control-label" })
        @Html.EditorFor(model => model.PacketContent, new { htmlAttributes = new { @id = "txtPacketContent", @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.PacketContent, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Calories, htmlAttributes: new { @class = "control-label" })
        @Html.EditorFor(model => model.Calories, new { htmlAttributes = new { @id = "txtCalories", @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Calories, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ExpiryDate, htmlAttributes: new { @class = "control-label" })
        @Html.EditorFor(model => model.ExpiryDate, new { htmlAttributes = new { @class = "form-control datepicker", @id = "datepicker", @autocomplete = "off"} })
        @Html.ValidationMessageFor(model => model.ExpiryDate, "", new { @class = "text-danger" })

    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label" })
        @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @id = "txtQuantity", @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
    </div>

    <div>
        <input type="submit" value="Save" class="btn btn-primary"/>
    </div>
}

<script>
    var date = new Date();
    date.setDate(date.getDate());
    $('#datepicker').datepicker({
        changeMonth: true,
        changeYear: true,
        format: "dd/mm/yyyy",
        language: "en-US",
        //language: "tr",
        startDate: date
    });

    $(function () {
        $('#ddlPacketTypeId').on('change', function (e) {
            var ddlPacketTypeId = $(this).val();
            //1=food, 2=water
            if (ddlPacketTypeId == 1) {
                // for disable.....
                $("#txtQuantity").prop("readonly", true);
                $("#txtCalories").prop("readonly", false);
                //$("#datepicker").prop("readonly", false);
                $("#datepicker").prop("readonly", false);
                //for remove or add validation...
                $('#txtQuantity').rules('remove', 'required');
                $('#txtCalories').rules('add', 'required');
                $('#datepicker').rules('add', 'required');
            }
            else if (ddlPacketTypeId == 2) {
                //for remove validation...
                $('#txtQuantity').rules('add', 'required');
                $('#txtCalories').rules('remove', 'required');
                $('#datepicker').rules('remove', 'required');
                // for disable.....
                $("#txtCalories").prop("readonly", true);
                $("#datepicker").prop("readonly", true);
                $("#txtQuantity").prop("readonly", false);
            }
            else if (ddlPacketTypeId == "") {
                //for add validation...
                $('#txtQuantity').rules('add', 'required');
                $('#txtCalories').rules('add', 'required');
                $('#datepicker').rules('add', 'required');
                //enable controls
                $("#txtCalories").prop("readonly", false);
                $("#datepicker").prop("readonly", false);
                $("#txtQuantity").prop("readonly", false);

            }
        });
    });

    $("document").ready(function () {
        var chkPacketId = '@Model.PacketId';
        var chkPacketTypeId = '@Model.PacketTypeId';
        if (chkPacketId > 0)
        {
            $("#ddlPacketTypeId").attr("disabled", "disabled");
            if (chkPacketTypeId == 1)
            {
                // for disable.....
                $("#txtQuantity").prop("readonly", true);
                $("#txtCalories").prop("readonly", false);
                //$("#datepicker").prop("readonly", false);
                $("#datepicker").prop("readonly", false);
                //for remove or add validation...
                $('#txtQuantity').rules('remove', 'required');
                $('#txtCalories').rules('add', 'required');
                $('#datepicker').rules('add', 'required');
            }
            else if (chkPacketTypeId == 2)
            {
                //for remove validation...
                $('#txtQuantity').rules('add', 'required');
                $('#txtCalories').rules('remove', 'required');
                $('#datepicker').rules('remove', 'required');
                // for disable.....
                $("#txtCalories").prop("readonly", true);
                $("#datepicker").prop("readonly", true);
                $("#txtQuantity").prop("readonly", false);
            }
        }
     });
</script>