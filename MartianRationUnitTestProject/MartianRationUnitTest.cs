using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using MartianRation.Code.Repository;
using MartianRation.Data.Edmx;
using MartianRation.Controllers;
using MartianRation.Models;
using System.Web.Mvc;
using System.Collections.Generic;
using Newtonsoft.Json;

namespace UnitTestProject1
{
    [TestClass]
    public class MartianRationUnitTest
    {
        private IGenericService<PacketRation> _packetRationService = null;
        private IGenericService<PacketType> _packetTypeService = null;

        private TestContext testContextInstance;
        public TestContext TestContext
        {
            get { return testContextInstance; }
            set { testContextInstance = value; }
        }

        /// <summary>
        /// Below test case is written to test the initial loading of the view without any error.
        /// </summary>
        [TestMethod]
        public void RationPacketIndex_TestMethod()
        {
            this._packetRationService = new GenericService<PacketRation>();
            this._packetTypeService = new GenericService<PacketType>();

            RationController rationController = new RationController(_packetRationService, _packetTypeService);
            // Act
            ViewResult result = rationController.PacketRation() as ViewResult;
            // Assert
            // Assert.AreEqual(result);
            Assert.IsNotNull(result);
        }

        /// <summary>
        /// Below test case is written for getting and checking the records returned from GetData() action method of controller class.
        /// </summary>
        [TestMethod]
        public void GetRationData_TestMethod()
        {
            this._packetRationService = new GenericService<PacketRation>();
            this._packetTypeService = new GenericService<PacketType>();

            RationController rationController = new RationController(_packetRationService, _packetTypeService);

            // Act
            ActionResult result = rationController.GetData() as ActionResult;
            // Assert
            Assert.IsNotNull(result);
        }

        /// <summary>
        /// Below test case is written for testing all the update case for the ration food/water record functionality for the ration management screen.
        /// </summary>
        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML", @"|DataDirectory|\TestCasesData\UpdateRation.xml", "Test_UpdateRation", DataAccessMethod.Sequential)]
        public void UpdateRation_TestMethod()
        {
            this._packetRationService = new GenericService<PacketRation>();
            this._packetTypeService = new GenericService<PacketType>();

            RationController rationController = new RationController(_packetRationService, _packetTypeService);

            PacketRationModel model = new PacketRationModel();
            model.PacketId = Convert.ToInt32(TestContext.DataRow["PacketId"]);
            model.PacketTypeId = Convert.ToInt32(TestContext.DataRow["PacketTypeId"]);
            model.PacketContent = Convert.ToString(TestContext.DataRow["PacketContent"]);
            model.ExpiryDate = Convert.ToInt32(TestContext.DataRow["PacketTypeId"]) == 1 ? Convert.ToString(TestContext.DataRow["ExpiryDate"]) : null;
            if (Convert.ToInt32(TestContext.DataRow["PacketTypeId"]) == 1)
            {
                model.Calories = Convert.ToDecimal(TestContext.DataRow["Calories"]);
            }

            if (Convert.ToInt32(TestContext.DataRow["PacketTypeId"]) == 2)
            {
                model.Quantity = Convert.ToDecimal(TestContext.DataRow["Quantity"]);
            }

            // Act
            JsonResult result = rationController.Save(model) as JsonResult;
            // Assert
            Assert.IsTrue(Convert.ToString(result.Data) == "{ status = True }");
            //Assert.IsNotNull(result);
        }

        /// <summary>
        /// Below test case is written for testing all the insert case for the ration food/water record functionality for the ration management screen.
        /// </summary>
        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML", @"|DataDirectory|\TestCasesData\InsertRation.xml", "Test_UpdateRation", DataAccessMethod.Sequential)]
        public void InsertRation_TestMethod()
        {
            this._packetRationService = new GenericService<PacketRation>();
            this._packetTypeService = new GenericService<PacketType>();

            RationController rationController = new RationController(_packetRationService, _packetTypeService);

            PacketRationModel model = new PacketRationModel();
            //model.PacketId = 8; this is not needed for Insert record as its auto generated by database.
            model.PacketTypeId = Convert.ToInt32(TestContext.DataRow["PacketTypeId"]);
            model.PacketContent = Convert.ToString(TestContext.DataRow["PacketContent"]);
            model.ExpiryDate = Convert.ToInt32(TestContext.DataRow["PacketTypeId"]) == 1 ? Convert.ToString(TestContext.DataRow["ExpiryDate"]) : null;
            if (Convert.ToInt32(TestContext.DataRow["PacketTypeId"]) == 1)
            {
                model.Calories = Convert.ToDecimal(TestContext.DataRow["Calories"]);
            }

            if (Convert.ToInt32(TestContext.DataRow["PacketTypeId"]) == 2)
            {
                model.Quantity = Convert.ToDecimal(TestContext.DataRow["Quantity"]);
            }

            // Act
            JsonResult result = rationController.Save(model) as JsonResult;
            // Assert
            Assert.IsTrue(Convert.ToString(result.Data) == "{ status = True }");
            //Assert.IsNotNull(result);

        }

        /// <summary>
        /// Below test case is written for testing the delete ration record functionality for the ration management screen.
        /// </summary>
        [TestMethod]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML", @"|DataDirectory|\TestCasesData\DeleteRation.xml", "Test_DeleteRation", DataAccessMethod.Sequential)]
        public void DeleteRation_TestMethod()
        {
            this._packetRationService = new GenericService<PacketRation>();
            this._packetTypeService = new GenericService<PacketType>();

            RationController rationController = new RationController(_packetRationService, _packetTypeService);

            PacketRationModel tempModel = new PacketRationModel();
            tempModel.PacketTypeId = Convert.ToInt32(TestContext.DataRow["PacketTypeId"]);
            tempModel.PacketContent = Convert.ToString(TestContext.DataRow["PacketContent"]);
            tempModel.ExpiryDate = Convert.ToInt32(TestContext.DataRow["PacketTypeId"]) == 1 ? Convert.ToString(TestContext.DataRow["ExpiryDate"]) : null;
            if (Convert.ToInt32(TestContext.DataRow["PacketTypeId"]) == 1)
            {
                tempModel.Calories = Convert.ToDecimal(TestContext.DataRow["Calories"]);
            }

            if (Convert.ToInt32(TestContext.DataRow["PacketTypeId"]) == 2)
            {
                tempModel.Quantity = Convert.ToDecimal(TestContext.DataRow["Quantity"]);
            }

            var getData = rationController.Save(tempModel);
            JsonResult resultGetNewRecord = rationController.GetData() as JsonResult;
            var jsonTemp = JsonConvert.SerializeObject(resultGetNewRecord.Data);
            var jsonFinal = JsonConvert.DeserializeObject<PacketRationDataModel>(jsonTemp);
            PacketRationCustomModel[] tempResult = jsonFinal.data.ToArray();
            var result = tempResult[tempResult.Length - 1];

            PacketRationModel model = new PacketRationModel();
            model.PacketId = result.PacketId;

            // Act
            JsonResult finalResult = rationController.DeleteRation(model) as JsonResult;
            // Assert
            Assert.IsTrue(Convert.ToString(finalResult.Data) == "{ status = True }");
        }
    }
}
